import React, { useEffect, useState } from 'react';
import {
  Panel,
  PanelHeader,
  PanelHeaderBack,
  Group,
  Header,
  SimpleCell,
} from '@vkontakte/vkui';
import { FormItem } from '@vkontakte/vkui';
import { Select } from '@vkontakte/vkui';
import { useRouteNavigator } from '@vkontakte/vk-mini-apps-router';
import PropTypes from 'prop-types';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
} from 'recharts';

export const Persik = ({ id }) => {
  const routeNavigator = useRouteNavigator();
  const [expenses, setExpenses] = useState([]);
  const [selectedMonth, setSelectedMonth] = useState('');

  // üé® Renk paleti kategorilere g√∂re
  const COLORS = {
    'üçî –ï–¥–∞': '#FF6384',
    'üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': '#36A2EB',
    'üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': '#9966FF',
    'üõí –ü–æ–∫—É–ø–∫–∏': '#FFCE56',
    'üì¶ –î—Ä—É–≥–æ–µ': '#8D99AE',
    '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': '#999999'
  };

  // localStorage'dan veriyi al
  useEffect(() => {
    const saved = JSON.parse(localStorage.getItem('expenses'));
    if (saved) setExpenses(saved);
  }, []);

  // üìÜ Se√ßilen aya g√∂re filtrelenmi≈ü harcamalar
  const filteredExpenses = selectedMonth
    ? expenses.filter(item => {
      const date = new Date(item.date);
      const month = ('0' + (date.getMonth() + 1)).slice(-2); // Ayƒ± 2 haneli yap
      return month === selectedMonth;
    })
    : expenses;

  const total = filteredExpenses.reduce((sum, item) => sum + item.amount, 0);

  const renderCenterText = ({ cx, cy }) => {
    return (
      <text x={cx} y={cy} textAnchor="middle" dominantBaseline="middle" fill="#fff" fontSize="16" fontWeight="bold">
        –ò—Ç–æ–≥–æ: {total}‚ÇΩ
      </text>
    );
  };

  const categoryData = filteredExpenses.reduce((acc, item) => {
    const category = item.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
    const found = acc.find(i => i.name === category);
    if (found) {
      found.value += item.amount;
    } else {
      acc.push({ name: category, value: item.amount });
    }
    return acc;
  }, []);

  const categories = ['üçî –ï–¥–∞', 'üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üõí –ü–æ–∫—É–ø–∫–∏', 'üì¶ –î—Ä—É–≥–æ–µ'];

  const categoryTotals = categories.map(category => {
    const sum = filteredExpenses
      .filter(item => item.category === category)
      .reduce((acc, cur) => acc + cur.amount, 0);
    return { category, sum };
  });

  // Grafik verisi i√ßin d√∂n√º≈ü√ºm
  const chartData = categoryTotals
    .filter(item => item.sum > 0)
    .map(item => ({
      name: item.category,
      value: item.sum,
    }));

  return (
    <Panel id={id}>
      <PanelHeader before={<PanelHeaderBack onClick={() => routeNavigator.back()} />}>
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      </PanelHeader>

      <Group header={<Header mode="secondary">–§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É</Header>}>
        <FormItem top="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü">
          <Select
            placeholder="–ú–µ—Å—è—Ü"
            value={selectedMonth}
            onChange={(e) => setSelectedMonth(e.target.value)}
            options={[
              { label: '–Ø–Ω–≤–∞—Ä—å', value: '01' },
              { label: '–§–µ–≤—Ä–∞–ª—å', value: '02' },
              { label: '–ú–∞—Ä—Ç', value: '03' },
              { label: '–ê–ø—Ä–µ–ª—å', value: '04' },
              { label: '–ú–∞–π', value: '05' },
              { label: '–ò—é–Ω—å', value: '06' },
              { label: '–ò—é–ª—å', value: '07' },
              { label: '–ê–≤–≥—É—Å—Ç', value: '08' },
              { label: '–°–µ–Ω—Ç—è–±—Ä—å', value: '09' },
              { label: '–û–∫—Ç—è–±—Ä—å', value: '10' },
              { label: '–ù–æ—è–±—Ä—å', value: '11' },
              { label: '–î–µ–∫–∞–±—Ä—å', value: '12' }
            ]}
          />
        </FormItem>
      </Group>


      <Group header={<Header mode="secondary">–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Header>}>
        <SimpleCell>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {filteredExpenses.length}</SimpleCell>

      </Group>

      <Group header={<Header mode="secondary">üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</Header>}>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <text
              x={80}
              y={130}
              textAnchor="middle"
              dominantBaseline="middle"
              fill="#fff"
              fontSize="16"
              fontWeight="bold"
            >
              –ò—Ç–æ–≥–æ: {total}‚ÇΩ
            </text>

            <Pie
              data={chartData}
              dataKey="value"
              outerRadius={100}
              label={({ name, percent }) =>
                `${name}: ${(percent * 100).toFixed(0)}%`
              }
            >
              {chartData.map((entry, index) => (
                <Cell
                  key={`cell-${index}`}
                  fill={COLORS[entry.name] || '#ccc'}
                />
              ))}
            </Pie>

            <Tooltip />
          </PieChart>
        </ResponsiveContainer>

        {categoryTotals.map((item, index) => (
          <SimpleCell key={index}>
            <span style={{ color: COLORS[item.category] || '#ccc' }}>
              {item.category}
            </span> ‚Äî {item.sum}‚ÇΩ
          </SimpleCell>
        ))}

      </Group>
    </Panel >
  );
};

Persik.propTypes = {
  id: PropTypes.string.isRequired,
};
